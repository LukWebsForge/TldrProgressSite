{"version":3,"sources":["Data.tsx","Table.tsx","App.tsx","index.tsx"],"names":["TranslationStatus","DataContext","React","ErrorMessageContext","DataFetcher","props","error","setError","isLoaded","setIsLoaded","data","setData","fetch","then","r","ok","Error","status","statusText","json","result","toString","Provider","value","children","loading","JumpList","listItems","Object","keys","entries","map","index","array","href","className","length","DataTable","DataTableHeader","DataTableBody","languageRows","languages","lang","osSections","os","DataTableOSHeader","DataTableOSPages","osProgress","progress","percentages","id","osPages","pages","page","DataTableOSPageRow","pageName","GitHubFileAction","pageData","handleClick","action","language","win","window","open","getGitHubPageUrl","focus","cells","onClick","create","Translated","view","Outdated","baseUrl","filePath","Footer","last_update","App","Loading","ErrorMessage","Legend","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f3a8368d.chunk.js","sourcesContent":["import * as React from \"react\";\n\n// https://reactjs.org/docs/faq-ajax.html\n// https://reactjs.org/docs/hooks-reference.html#usecontext\n\nenum TranslationStatus {\n    Outdated = 1,\n    Translated = 2,\n}\n\ntype OperatingSystem = string;\ntype Language = string;\ntype PageName = string;\n\ninterface TranslationData {\n    last_update: string,\n    languages: Language[],\n    entries: Record<OperatingSystem, TranslationOS>,\n}\n\ninterface TranslationOS {\n    progress: Record<Language, number>,\n    pages: Record<PageName, TranslationPage>,\n}\n\ninterface TranslationPage {\n    status: Record<Language, TranslationStatus>,\n}\n\nconst DataContext = React.createContext<TranslationData | null>(null);\nconst ErrorMessageContext = React.createContext<string | null>(null);\n\n// We're using React.ReactElement & React.ReactNode instead of JSX.Element: https://stackoverflow.com/a/47899926/4106848\ntype DataFetcherProps = { error: React.ReactElement, loading: React.ReactElement, children: React.ReactNode };\nconst DataFetcher = (props: DataFetcherProps) => {\n    const [error, setError] = React.useState<string | null>(null);\n    const [isLoaded, setIsLoaded] = React.useState<boolean>(false);\n    const [data, setData] = React.useState<TranslationData | null>(null);\n\n    // [] = only run on component mount\n    React.useEffect(() => {\n        fetch(\"data.json\")\n            .then(r => {\n                if (!r.ok)\n                    throw new Error(r.status + ': ' + r.statusText);\n\n                return r.json();\n            })\n            .then(\n                (result) => {\n                    setData(result as TranslationData);\n                    setIsLoaded(true);\n                },\n\n                (error) => {\n                    setError(error.toString());\n                    setIsLoaded(true);\n                });\n    }, []);\n\n    if (error) {\n        return <ErrorMessageContext.Provider value={error}>\n            {props.error}\n        </ErrorMessageContext.Provider>\n    } else if (!isLoaded) {\n        return props.loading\n    } else {\n        return <DataContext.Provider value={data}>\n            {props.children}\n        </DataContext.Provider>\n    }\n}\n\nexport {DataFetcher, DataContext, TranslationStatus, ErrorMessageContext};\nexport type {OperatingSystem, Language, PageName};\n","import {DataContext, OperatingSystem, TranslationStatus} from \"./Data\";\nimport * as React from \"react\";\n\nconst JumpList = () => {\n    const data = React.useContext(DataContext);\n\n    const listItems = Object.keys(data!.entries).map((value, index, array) =>\n        <a href={'#' + value} className=\"hover:text-blue-500\" key={value}>\n            {value}{index < array.length - 1 ? ' - ' : ''}\n        </a>\n    );\n\n    return <div className=\"my-10\">\n        <h3 className=\"text-2xl p-5\">Quick Jump List</h3>\n        {listItems}\n    </div>\n}\n\nconst DataTable = () =>\n    <table className=\"text-center border-opacity-50 mx-auto\">\n        <DataTableHeader/>\n        <DataTableBody/>\n    </table>;\n\nconst DataTableHeader = () => {\n    const data = React.useContext(DataContext);\n\n    // We're applying the sticky class to each <th>, because Chrome does not support sticky on <thead> and <tr>\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=702927\n    const languageRows = data!.languages.map((lang) =>\n        <th className=\"px-2 py-4 sticky -top-1 bg-white bg-opacity-90 bg-clip-padding\" key={lang}>{lang}</th>);\n\n    return <thead className=\"border border-gray-200\">\n    <tr>\n        <th className=\"px-2 py-4 bg-white\">page</th>\n        {languageRows}\n    </tr>\n    </thead>\n}\n\nconst DataTableBody = () => {\n    const data = React.useContext(DataContext);\n\n    const osSections = Object.keys(data!.entries).map((os) =>\n        <React.Fragment key={os}>\n            <DataTableOSHeader os={os}/>\n            <DataTableOSPages os={os}/>\n        </React.Fragment>\n    );\n\n    return <tbody className=\"text-sm\">{osSections}</tbody>\n}\n\ninterface OsProps {\n    os: OperatingSystem,\n}\n\ninterface OsPageProps extends OsProps {\n    pageName: string,\n}\n\nconst DataTableOSHeader = ({os}: OsProps) => {\n    const data = React.useContext(DataContext);\n    const osProgress = data!.entries[os].progress;\n\n    const percentages = data!.languages\n        .map((lang) => <td className=\"px-1 py-2\" key={lang}>{osProgress[lang]}%</td>);\n\n    return <tr className=\"border border-gray-200 bg-indigo-300 p-4\">\n        <th className=\"text-base px-1 py-2\" id={os}>{os}</th>\n        {percentages}\n    </tr>\n}\n\nconst DataTableOSPages = ({os}: OsProps) => {\n    const data = React.useContext(DataContext);\n    const osPages = data!.entries[os].pages;\n\n    const pages = Object.keys(osPages)\n        .map((page) => <DataTableOSPageRow os={os} pageName={page} key={page}/>);\n\n    return <>{pages}</>;\n}\n\nenum GitHubFileAction {\n    view,\n    create\n}\n\nconst DataTableOSPageRow = ({os, pageName}: OsPageProps) => {\n    const data = React.useContext(DataContext);\n    const pageData = data!.entries[os].pages[pageName];\n\n    function handleClick(action: GitHubFileAction, language: string) {\n        const win = window.open(getGitHubPageUrl(action, os, pageName, language));\n        if (win != null)\n            win.focus();\n    }\n\n    const cells = data!.languages.map((lang) => {\n        if (lang in pageData.status) {\n            const status = pageData.status[lang];\n            switch (status) {\n                case TranslationStatus.Translated:\n                    return <td className=\"bg-green-200 cursor-pointer\" key={lang}\n                               onClick={() => handleClick(GitHubFileAction.view, lang)}>✔</td>\n                case TranslationStatus.Outdated:\n                    return <td className=\"bg-yellow-200 cursor-pointer\" key={lang}\n                               onClick={() => handleClick(GitHubFileAction.view, lang)}>⚠</td>\n                default:\n                    return <td>?</td>\n            }\n        } else {\n            return <td className=\"bg-red-200 cursor-pointer\" key={lang}\n                       onClick={() => handleClick(GitHubFileAction.create, lang)}>✖</td>\n        }\n    });\n\n    return <tr className=\"border border-gray-200 hover:bg-gray-100\">\n        <td className=\"text-left text-base p-1\">{pageName}</td>\n        {cells}\n    </tr>\n}\n\nconst getGitHubPageUrl = (action: GitHubFileAction, os: string, page: string, language: string) => {\n    const languageSuffix = language === 'en' ? '' : '.' + language\n\n    const baseUrl = \"https://github.com/tldr-pages/tldr\";\n    const filePath = `/master/pages${languageSuffix}/${os}/${page}.md`\n\n    if (action === GitHubFileAction.create) {\n        return baseUrl + \"/new\" + filePath + `?filename=${page}.md`;\n    } else if (action === GitHubFileAction.view) {\n        return baseUrl + \"/blob\" + filePath;\n    } else {\n        throw new Error('Unknown GitHubFileAction: ' + action);\n    }\n}\n\nconst Footer = () => {\n    const data = React.useContext(DataContext);\n\n    return (\n        <div className=\"my-6 text-center text-gray-700\">\n            Thanks for using this site •\n            Generated by <a href=\"https://github.com/LukWebsForge/TldrProgress\">tldr-translation-progress</a> •\n            Last updated {data!.last_update}\n        </div>\n    )\n}\n\nexport {JumpList, DataTable, Footer};\n","import {DataFetcher, ErrorMessageContext} from \"./Data\";\nimport {DataTable, Footer, JumpList} from \"./Table\";\nimport * as React from \"react\";\n\nconst App = () =>\n    <div className=\"container mx-auto text-center\">\n        <h1 className=\"font-bold text-4xl m-10\">tldr translation progress</h1>\n        <DataFetcher loading={<Loading/>} error={<ErrorMessage/>}>\n            <Legend/>\n            <JumpList/>\n            <DataTable/>\n            <Footer/>\n        </DataFetcher>\n    </div>;\n\nconst Legend = () =>\n    <div className=\"mt-2\">\n        <h3 className=\"text-2xl p-5\">Legend</h3>\n        <table className=\"border-collapse mx-auto\">\n            <tbody>\n            <tr>\n                <td className=\"border-b border-gray-400 px-4 py-2\">✔</td>\n                <td className=\"border-b border-gray-400 px-4 py-2\">\n                    translated & same number of entries as the english version\n                </td>\n            </tr>\n            <tr>\n                <td className=\"border-b border-gray-400 px-4 py-2\">⚠</td>\n                <td className=\"border-b border-gray-400 px-4 py-2\">\n                    not up-to-date (different number of entries than the english version)\n                </td>\n            </tr>\n            <tr>\n                <td className=\"px-4 py-2\">✖</td>\n                <td className=\"px-4 py-2\">not translated</td>\n            </tr>\n            </tbody>\n        </table>\n    </div>;\n\nconst Loading = () =>\n    <div className=\"text-3xl text-blue-400\">\n        Loading ...\n    </div>;\n\nconst ErrorMessage = () => {\n    const error = React.useContext(ErrorMessageContext);\n\n    return (\n        <div className=\"text-2xl text-red-400\">\n            Unable to load the data ): <br/>\n            <div className=\"text-lg\">{error}</div>\n        </div>\n    );\n}\n\nexport {App}\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\n// Learn more about TypeScript + React:\n// https://2ality.com/2018/04/type-notation-typescript.html\n// https://github.com/typescript-cheatsheets/react#section-1-setup-typescript-with-react\n// https://create-react-app.dev/docs/adding-typescript/\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}